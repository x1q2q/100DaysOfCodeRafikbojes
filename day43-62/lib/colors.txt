colors green:
android green #32de84
army green #4B5320
artichoke #8F9779
artichoke green #4B6F44
asparagus #87A96B
avocado #568203
bottle green #006A4E
bright mint #4FFFB0
carlsberg green #17B169
brunswick green #1B4D3E
castleton green #00563B
crayola green #1CAC78
eagless midnight green #004953
emerald #50C878
forest green #228B22
go green #00AB66
hunter green #355E3B
hookers green #49796B
jetes gotham green #00573F
mint #3EB489
msu green #18453B
pine green #01796F
starbucks green #006241
whole foods green #00674b
spanish green #009150
tea green #009150
yellow green #009150
myrtle green #317873

sea salt background: linear-gradient(90deg, #4b6cb7 0%, #182848 100%);
orange 
background-color: #FBAB7E;
background-image: linear-gradient(62deg, #FBAB7E 0%, #F7CE68 100%);

orange2 background-color: #FAD961;
background-image: linear-gradient(90deg, #FAD961 0%, #F76B1C 100%);


import 'package:flutter/material.dart';
import 'package:timeline_list/timeline.dart';
import 'package:timeline_list/timeline_model.dart';
import 'data.dart';

class TimelinePage extends StatefulWidget {
  TimelinePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _TimelinePageState createState() => _TimelinePageState();
}

class _TimelinePageState extends State<TimelinePage> {
  final PageController pageController =
      PageController(initialPage: 1, keepPage: true);
  int pageIx = 1;

  @override
  Widget build(BuildContext context) {
    List<Widget> pages = [
      timelineModel(TimelinePosition.Left),
      timelineModel(TimelinePosition.Center),
      timelineModel(TimelinePosition.Right)
    ];

    return Scaffold(
        bottomNavigationBar: BottomNavigationBar(
            currentIndex: pageIx,
            onTap: (i) => pageController.animateToPage(i,
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut),
            items: const [
              BottomNavigationBarItem(
                icon: Icon(Icons.format_align_left),
                title: Text("LEFT"),
              ),
              BottomNavigationBarItem(
                icon: Icon(Icons.format_align_center),
                title: Text("CENTER"),
              ),
              BottomNavigationBarItem(
                icon: Icon(Icons.format_align_right),
                title: Text("RIGHT"),
              ),
            ]),
        appBar: AppBar(
          title: Text(widget.title),
        ),
        body: PageView(
          onPageChanged: (i) => setState(() => pageIx = i),
          controller: pageController,
          children: pages,
        ));
  }

  timelineModel(TimelinePosition position) => Timeline.builder(
      itemBuilder: centerTimelineBuilder,
      itemCount: doodles.length,
      physics: position == TimelinePosition.Left
          ? ClampingScrollPhysics()
          : BouncingScrollPhysics(),
      position: position);

  TimelineModel centerTimelineBuilder(BuildContext context, int i) {
    final doodle = doodles[i];
    final textTheme = Theme.of(context).textTheme;
    return TimelineModel(
        Card(
          margin: EdgeInsets.symmetric(vertical: 16.0),
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)),
          clipBehavior: Clip.antiAlias,
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                Image.network(doodle.doodle),
                const SizedBox(
                  height: 8.0,
                ),
                Text(doodle.time, style: textTheme.caption),
                const SizedBox(
                  height: 8.0,
                ),
                Text(
                  doodle.name,
                  style: textTheme.title,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(
                  height: 8.0,
                ),
              ],
            ),
          ),
        ),
        position:
            i % 2 == 0 ? TimelineItemPosition.right : TimelineItemPosition.left,
        isFirst: i == 0,
        isLast: i == doodles.length,
        iconBackground: doodle.iconBackground,
        icon: doodle.icon);
  }
}
???????????????????????
################
import 'package:flutter/material.dart';
import 'package:timeline_tile/timeline_tile.dart';

import '../showcase_timeline.dart';

const example7 = Example(
  name: 'Give an Icon to the indicator.',
  description: 'With IconStyle you can provide an Icon to be rendered inside '
      'the default indicator.',
  child: Example7(),
  code: '''
return Container(
  color: Colors.white,
  child: Column(
    mainAxisSize: MainAxisSize.min,
    children: <Widget>[
      TimelineTile(
        alignment: TimelineAlign.center,
        isFirst: true,
        indicatorStyle: IndicatorStyle(
          width: 40,
          color: Colors.purple,
          padding: const EdgeInsets.all(8),
          iconStyle: IconStyle(
            color: Colors.white,
            iconData: Icons.insert_emoticon,
          ),
        ),
        leftChild: Container(
          constraints: const BoxConstraints(
            minHeight: 120,
          ),
          color: Colors.amberAccent,
        ),
      ),
      TimelineTile(
        alignment: TimelineAlign.center,
        isLast: true,
        indicatorStyle: IndicatorStyle(
          width: 30,
          color: Colors.red,
          indicatorY: 0.7,
          iconStyle: IconStyle(
            color: Colors.white,
            iconData: Icons.thumb_up,
          ),
        ),
        rightChild: Container(
          constraints: const BoxConstraints(
            minHeight: 80,
          ),
          color: Colors.lightGreenAccent,
        ),
      ),
    ],
  ),
);''',
);

class Example7 extends StatelessWidget {
  const Example7({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SliverList(
      delegate: SliverChildListDelegate(
        <Widget>[
          Container(
            color: Colors.white,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                TimelineTile(
                  alignment: TimelineAlign.center,
                  isFirst: true,
                  indicatorStyle: IndicatorStyle(
                    width: 40,
                    color: Colors.purple,
                    padding: const EdgeInsets.all(8),
                    iconStyle: IconStyle(
                      color: Colors.white,
                      iconData: Icons.insert_emoticon,
                    ),
                  ),
                  leftChild: Container(
                    constraints: const BoxConstraints(
                      minHeight: 120,
                    ),
                    color: Colors.amberAccent,
                  ),
                ),
                TimelineTile(
                  alignment: TimelineAlign.center,
                  isLast: true,
                  indicatorStyle: IndicatorStyle(
                    width: 30,
                    color: Colors.red,
                    indicatorY: 0.7,
                    iconStyle: IconStyle(
                      color: Colors.white,
                      iconData: Icons.thumb_up,
                    ),
                  ),
                  rightChild: Container(
                    constraints: const BoxConstraints(
                      minHeight: 80,
                    ),
                    color: Colors.lightGreenAccent,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


///
Container(
      margin: EdgeInsets.symmetric(vertical: 10),
      child: GridView.builder(
          physics: NeverScrollableScrollPhysics(),
          shrinkWrap: true,
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 2,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          itemCount: jenisBarangs.length,
          itemBuilder: (BuildContext context, int id) {
            return ClipRRect(
              borderRadius: BorderRadius.all(Radius.circular(5)),
              child: Material(
                color: Colors.teal,
                child: InkWell(
                  splashColor: AppColors.green3, // inkwell color
                  child: Padding(
                      padding: EdgeInsets.all(5),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: <Widget>[
                          Text(
                            jenisBarangs[id].jenis,
                            style: Styles.wTitleTextStyle,
                          ),
                          Icon(
                            Icons.calendar_view_day,
                            size: 40,
                            color: Colors.white60,
                          )
                        ],
                      )),
                  onTap: () {},
                ),
              ),
            );
          }),
    );
  }

  Widget _boxTimeline() {
    // return _TimelineDelivery();
    return Container(
      color: Colors.white,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: <Widget>[
          TimelineTile(
            alignment: TimelineAlign.left,
            isFirst: true,
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Colors.purple,
            ),
            topLineStyle: const LineStyle(
              color: Colors.purple,
              width: 6,
            ),
            rightChild: Container(
              constraints: const BoxConstraints(
                minHeight: 120,
              ),
              color: Colors.amberAccent,
            ),
          ),
          TimelineTile(
            alignment: TimelineAlign.left,
            topLineStyle: const LineStyle(
              color: Colors.purple,
              width: 6,
            ),
            bottomLineStyle: const LineStyle(
              color: Colors.deepOrange,
              width: 6,
            ),
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Colors.cyan,
            ),
          ),
          TimelineTile(
            alignment: TimelineAlign.left,
            isLast: true,
            topLineStyle: const LineStyle(
              color: Colors.deepOrange,
              width: 6,
            ),
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Colors.red,
            ),
            rightChild: Container(
              constraints: const BoxConstraints(
                minHeight: 80,
              ),
              color: Colors.lightGreenAccent,
            ),
          ),
        ],
      ),
    )

    class _TimelineDelivery extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: ListView(
        shrinkWrap: true,
        children: <Widget>[
          TimelineTile(
            alignment: TimelineAlign.manual,
            lineX: 0.1,
            isFirst: true,
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Color(0xFF27AA69),
              padding: EdgeInsets.all(6),
            ),
            rightChild: const _RightChild(
              asset: 'assets/images/phone.png',
              title: 'Order Placed',
              message: 'We have received your order.',
            ),
            topLineStyle: const LineStyle(
              color: Color(0xFF27AA69),
            ),
          ),
          TimelineTile(
            alignment: TimelineAlign.manual,
            lineX: 0.1,
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Color(0xFF27AA69),
              padding: EdgeInsets.all(6),
            ),
            rightChild: const _RightChild(
              asset: 'assets/images/phone.png',
              title: 'Order Confirmed',
              message: 'Your order has been confirmed.',
            ),
            topLineStyle: const LineStyle(
              color: Color(0xFF27AA69),
            ),
          ),
          TimelineTile(
            alignment: TimelineAlign.manual,
            lineX: 0.1,
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Color(0xFF2B619C),
              padding: EdgeInsets.all(6),
            ),
            rightChild: const _RightChild(
              asset: 'assets/images/phone.png',
              title: 'Order Processed',
              message: 'We are preparing your order.',
            ),
            topLineStyle: const LineStyle(
              color: Color(0xFF27AA69),
            ),
            bottomLineStyle: const LineStyle(
              color: Color(0xFFDADADA),
            ),
          ),
          TimelineTile(
            alignment: TimelineAlign.manual,
            lineX: 0.1,
            isLast: true,
            indicatorStyle: const IndicatorStyle(
              width: 20,
              color: Color(0xFFDADADA),
              padding: EdgeInsets.all(6),
            ),
            rightChild: const _RightChild(
              disabled: true,
              asset: 'assets/images/phone.png',
              title: 'Ready to Pickup',
              message: 'Your order is ready for pickup.',
            ),
            topLineStyle: const LineStyle(
              color: Color(0xFFDADADA),
            ),
          ),
        ],
      ),
    );
  }
}

class _RightChild extends StatelessWidget {
  const _RightChild({
    Key key,
    this.asset,
    this.title,
    this.message,
    this.disabled = false,
  }) : super(key: key);

  final String asset;
  final String title;
  final String message;
  final bool disabled;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: <Widget>[
          Opacity(
            child: Image.asset(asset, height: 50),
            opacity: disabled ? 0.5 : 1,
          ),
          const SizedBox(width: 16),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              Text(
                title,
              ),
              const SizedBox(height: 6),
              Text(
                message,
              ),
            ],
          ),
        ],
      ),
    );
  }
}
